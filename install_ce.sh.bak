#!/bin/bash

# install_ce.sh - 流量限速管理系统 (Traffic Limiting Management System)
# 系统要求: Ubuntu 24.04.2 LTS (用户提供信息: Ubuntu 24.04, vnStat 2.12)
# 功能: vnStat + tc 流量监控与限速 (Traffic Monitoring and Limiting with vnStat + tc)
# 新增功能: 每月流量统计与管理 (Monthly traffic statistics and management)

# ==============================================================================
# 脚本配置与变量定义 (Script Configuration and Variable Definitions)
# ==============================================================================

# 设置严格模式，提高脚本健壮性 (Set strict mode for script robustness)
# -e: Exit immediately if a command exits with a non-zero status
# -u: Treat unset variables as an error and exit
# -o pipefail: The exit status of a pipeline is the exit status of the last command that failed
set -euo pipefail

# 颜色定义 (Color Definitions)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# 配置文件路径 (Configuration File Paths)
CONFIG_FILE="/etc/ce_traffic_limit.conf"
SERVICE_FILE="/etc/systemd/system/ce-traffic-monitor.service"
TIMER_FILE="/etc/systemd/system/ce-traffic-monitor.timer"
MONITOR_SCRIPT="/usr/local/bin/ce-monitor"
SCRIPT_PATH="/usr/local/bin/ce" # User interactive shortcut command
INSTALLER_PATH="/usr/local/bin/install_ce.sh" # Installer script itself is copied here
TRAFFIC_LOG="/var/log/ce-daily-traffic.log" # Traffic log file

# 默认配置 (Default Configuration)
DAILY_LIMIT=30 # Daily traffic limit in GB
SPEED_LIMIT=512 # Speed limit in KB/s
INTERFACE="" # Network interface name, auto-detected or manually specified
# Monthly traffic limit, defaults to 10 times the daily limit
MONTHLY_LIMIT=$(echo "$DAILY_LIMIT * 10" | bc) # GB

# ==============================================================================
# 核心函数定义 (Core Function Definitions)
# ==============================================================================

# 记录日志 (Log function)
log_message() {
    local type="$1" # e.g., INFO, WARN, ERROR
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ${type}: $message" >> "$TRAFFIC_LOG"
}

# 获取系统信息 (Get system information)
get_system_info() {
    echo -e "${BLUE}检测系统信息...${NC}" # Detecting system information...
    OS_VERSION=$(lsb_release -d | cut -f2 || echo "未知")
    KERNEL_VERSION=$(uname -r || echo "未知")
    echo -e "${GREEN}系统版本: $OS_VERSION${NC}" # System version:
    echo -e "${GREEN}内核版本: $KERNEL_VERSION${NC}" # Kernel version:
}

# 自动检测网卡 (Auto-detect network interface)
detect_interface() {
    echo -e "${BLUE}自动检测网络接口...${NC}" # Auto-detecting network interface...
    # Get the interface for the default route
    INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1 || true)
    if [ -z "$INTERFACE" ]; then
        echo -e "${RED}无法自动检测网卡，请手动选择:${NC}" # Unable to auto-detect interface, please select manually:
        ip link show | grep -E "^[0-9]+:" | awk -F': ' '{print $2}' | grep -v lo || echo "无可用网卡"
        read -rp "请输入网卡名称: " INTERFACE # Please enter the interface name:
        if [ -z "$INTERFACE" ]; then
            echo -e "${RED}未输入网卡名称，安装中止。${NC}" # No interface name entered, installation aborted.
            log_message "ERROR" "未输入网卡名称，安装中止。"
            exit 1
        fi
        # Validate user-entered interface name
        if ! ip link show "$INTERFACE" &>/dev/null; then
            echo -e "${RED}错误: 输入的网卡 '$INTERFACE' 无效，安装中止。${NC}" # Error: Entered interface '$INTERFACE' is invalid, installation aborted.
            log_message "ERROR" "输入的网卡 '$INTERFACE' 无效，安装中止。"
            exit 1
        fi
    fi
    echo -e "${GREEN}使用网卡: $INTERFACE${NC}" # Using interface:
    log_message "INFO" "检测到并使用网卡: $INTERFACE"
}

# 安装依赖 (Install dependencies)
install_dependencies() {
    echo -e "${BLUE}安装依赖包...${NC}" # Installing dependency packages...
    apt update || log_message "WARN" "apt update 失败，可能存在网络问题或源配置错误。"
    if ! apt install -y vnstat iproute2 bc coreutils jq sqlite3; then
        echo -e "${RED}错误: 依赖包安装失败，请检查网络或apt源。${NC}" # Error: Dependency package installation failed, please check network or apt sources.
        log_message "ERROR" "依赖包安装失败。"
        exit 1
    fi
    
    # Configure vnStat
    if [ -f "/etc/vnstat.conf" ]; then
        cp "/etc/vnstat.conf" "/etc/vnstat.conf.backup" || log_message "WARN" "备份 /etc/vnstat.conf 失败。"
        echo -e "${YELLOW}已备份 /etc/vnstat.conf 到 /etc/vnstat.conf.backup${NC}" # Backed up /etc/vnstat.conf to /etc/vnstat.conf.backup
    fi
    
    # Modify vnStat configuration for higher precision
    cat > "/etc/vnstat.conf" << 'EOF'
# vnStat configuration
DatabaseDir "/var/lib/vnstat"
Locale "-"
MonthRotate 1
DayFormat "%Y-%m-%d"
MonthFormat "%Y-%m"
TopFormat "%Y-%m-%d"
RXCharacter "%"
TXCharacter ":"
RXHourCharacter "r"
TXHourCharacter "t"
UnitMode 0
RateUnit 1
DefaultDecimals 2
HourlyDecimals 1
OutputFormat 1
QueryMode 0
CheckDiskSpace 1
BootVariation 15
TrafficUnit 0
DatabaseSynchronizeAll 1
DatabaseWriteAheadLogging 0
UpdateFileOwner 1
PollInterval 5
OfflineSaveInterval 30
BandwidthDetection 1
MaxBandwidth 1000
Sampletime 5
EOF
    log_message "INFO" "vnStat 配置已更新。"

    # Start vnstat service
    systemctl enable vnstat || log_message "WARN" "启用 vnstat 服务失败。"
    systemctl restart vnstat || log_message "WARN" "重启 vnstat 服务失败。"
    
    # Add interface to vnstat, create if it doesn't exist
    vnstat -i "$INTERFACE" --create 2>/dev/null || log_message "WARN" "为接口 $INTERFACE 创建 vnStat 数据库失败或已存在。"
    
    # Wait for vnStat initialization
    echo -e "${YELLOW}等待vnStat初始化...${NC}" # Waiting for vnStat initialization...
    sleep 5 # Reduce wait time, 5 seconds is usually enough
    
    echo -e "${GREEN}依赖安装完成${NC}" # Dependencies installed.
    log_message "INFO" "所有依赖安装完成。"
}

# 初始化每日流量计数器 (Initialize daily traffic counter)
init_daily_counter() {
    local today=$(date +%Y-%m-%d)
    # Try to read system network interface bytes, default to 0 if failed
    local current_rx=$(cat "/sys/class/net/$INTERFACE/statistics/rx_bytes" 2>/dev/null || echo 0)
    local current_tx=$(cat "/sys/class/net/$INTERFACE/statistics/tx_bytes" 2>/dev/null || echo 0)
    
    # Update starting values and date in the config file
    sed -i "s/^DAILY_START_RX=.*/DAILY_START_RX=$current_rx/" "$CONFIG_FILE" || log_message "ERROR" "更新 DAILY_START_RX 失败。"
    sed -i "s/^DAILY_START_TX=.*/DAILY_START_TX=$current_tx/" "$CONFIG_FILE" || log_message "ERROR" "更新 DAILY_START_TX 失败。"
    sed -i "s/^LAST_RESET_DATE=.*/LAST_RESET_DATE=$today/" "$CONFIG_FILE" || log_message "ERROR" "更新 LAST_RESET_DATE 失败。"
    
    log_message "INFO" "初始化每日计数器: RX=$(format_traffic "$current_rx"), TX=$(format_traffic "$current_tx")"
}

# 初始化每月流量计数器 (Initialize monthly traffic counter)
init_monthly_counter() {
    local this_month=$(date +%Y-%m)
    # Try to read system network interface bytes, default to 0 if failed
    local current_rx=$(cat "/sys/class/net/$INTERFACE/statistics/rx_bytes" 2>/dev/null || echo 0)
    local current_tx=$(cat "/sys/class/net/$INTERFACE/statistics/tx_bytes" 2>/dev/null || echo 0)
    
    # Update starting values and date in the config file
    sed -i "s/^MONTHLY_START_RX=.*/MONTHLY_START_RX=$current_rx/" "$CONFIG_FILE" || log_message "ERROR" "更新 MONTHLY_START_RX 失败。"
    sed -i "s/^MONTHLY_START_TX=.*/MONTHLY_START_TX=$current_tx/" "$CONFIG_FILE" || log_message "ERROR" "更新 MONTHLY_START_TX 失败。"
    sed -i "s/^LAST_MONTHLY_RESET_DATE=.*/LAST_MONTHLY_RESET_DATE=$this_month/" "$CONFIG_FILE" || log_message "ERROR" "更新 LAST_MONTHLY_RESET_DATE 失败。"
    
    log_message "INFO" "初始化每月计数器: RX=$(format_traffic "$current_rx"), TX=$(format_traffic "$current_tx")"
}

# 创建配置文件 (Create configuration file)
create_config() {
    local today=$(date +%Y-%m-%d)
    local this_month=$(date +%Y-%m)
    # Use here-document to write config file, ensuring variables are expanded correctly
    cat > "$CONFIG_FILE" << EOF
DAILY_LIMIT=$DAILY_LIMIT
SPEED_LIMIT=$SPEED_LIMIT
MONTHLY_LIMIT=$MONTHLY_LIMIT
INTERFACE=$INTERFACE
LIMIT_ENABLED=false
LAST_RESET_DATE=$today
DAILY_START_RX=0
DAILY_START_TX=0
LAST_MONTHLY_RESET_DATE=$this_month
MONTHLY_START_RX=0
MONTHLY_START_TX=0
EOF
    
    # Initialize daily and monthly traffic counters
    init_daily_counter
    init_monthly_counter
    
    echo -e "${GREEN}配置文件已创建: $CONFIG_FILE${NC}" # Configuration file created:
    log_message "INFO" "配置文件 $CONFIG_FILE 已创建并初始化。"
}

# 读取配置 (Load configuration)
load_config() {
    # Ensure file exists and is readable, then source it
    if [ -f "$CONFIG_FILE" ] && [ -r "$CONFIG_FILE" ]; then
        # shellcheck source=/dev/null
        source "$CONFIG_FILE"
    else
        echo -e "${RED}错误: 配置文件 $CONFIG_FILE 不存在或无法读取。请先运行安装脚本。${NC}" # Error: Configuration file does not exist or is unreadable. Please run the installation script first.
        log_message "ERROR" "配置文件 $CONFIG_FILE 不存在或无法读取。"
        exit 1
    fi
}

# 检查并重置每日计数器 (Check and reset daily counter)
# This function should be called in the monitor script to ensure daily reset at 00:00
check_and_reset_daily() {
    load_config # Ensure latest config is loaded
    local today=$(date +%Y-%m-%d)
    
    if [ "$today" != "$LAST_RESET_DATE" ]; then
        echo -e "${YELLOW}检测到新的一天，重置流量计数器...${NC}" # Detected a new day, resetting traffic counter...
        log_message "INFO" "检测到新的一天 ($today)，重置每日流量计数器。"
        
        # Record yesterday's total traffic (use vnStat data, as system counters might have reset)
        local yesterday_usage=$(get_vnstat_daily_bytes)
        local yesterday_gb=$(echo "scale=3; $yesterday_usage / 1024 / 1024 / 1024" | bc 2>/dev/null || echo "0")
        log_message "INFO" "昨日($LAST_RESET_DATE)流量统计: ${yesterday_gb}GB"
        
        # Reset counter
        init_daily_counter
        
        # If speed limit was active yesterday, automatically remove it for the new day
        if [ "$LIMIT_ENABLED" = "true" ]; then
            remove_speed_limit
            log_message "INFO" "新的一天，自动解除限速。"
        fi
    fi
}

# 检查并重置每月计数器 (Check and reset monthly counter)
# This function should be called in the monitor script to ensure monthly reset on the 1st
check_and_reset_monthly() {
    load_config # Ensure latest config is loaded
    local this_month=$(date +%Y-%m)
    
    if [ "$this_month" != "$LAST_MONTHLY_RESET_DATE" ]; then
        echo -e "${YELLOW}检测到新的月份，重置每月流量计数器...${NC}" # Detected a new month, resetting monthly traffic counter...
        log_message "INFO" "检测到新的月份 ($this_month)，重置每月流量计数器。"
        
        # Record last month's total traffic (using vnStat data)
        local last_month_usage=$(get_vnstat_monthly_bytes)
        local last_month_gb=$(echo "scale=3; $last_month_usage / 1024 / 1024 / 1024" | bc 2>/dev/null || echo "0")
        log_message "INFO" "上月($LAST_MONTHLY_RESET_DATE)流量统计: ${last_month_gb}GB"
        
        # Reset counter
        init_monthly_counter
    fi
}

# 获取今日流量使用量（字节）- 优先使用系统网卡统计，负数时或异常时回退到vnStat
get_daily_usage_bytes() {
    local skip_reset_check=${1:-false} # Added argument to skip reset check for internal calls
    if [ "$skip_reset_check" = "false" ]; then
        check_and_reset_daily # Trigger daily reset check here
    fi
    load_config # Ensure latest config is loaded

    local current_rx=$(cat "/sys/class/net/$INTERFACE/statistics/rx_bytes" 2>/dev/null || echo 0)
    local current_tx=$(cat "/sys/class/net/$INTERFACE/statistics/tx_bytes" 2>/dev/null || echo 0)
    
    local daily_rx=$((current_rx - DAILY_START_RX))
    local daily_tx=$((current_tx - DAILY_START_TX))
    local daily_total=$((daily_rx + daily_tx))
    
    # If negative (possibly due to interface reset), or initial values are anomalous (e.g., 0 but current traffic exists), use vnStat as fallback
    if [ "$daily_total" -lt 0 ] || ([ "$DAILY_START_RX" -eq 0 ] && [ "$DAILY_START_TX" -eq 0 ] && [ "$current_rx" -gt 0 ] && [ "$current_tx" -gt 0 ] ); then
        log_message "WARN" "今日流量计算出现负数或起始值异常，尝试使用vnStat备选。"
        daily_total=$(get_vnstat_daily_bytes)
    fi
    
    echo "$daily_total"
}

# 获取当月流量使用量（字节）- 优先使用系统网卡统计，负数时或异常时回退到vnStat
get_monthly_usage_bytes() {
    local skip_reset_check=${1:-false} # Added argument to skip reset check for internal calls
    if [ "$skip_reset_check" = "false" ]; then
        check_and_reset_monthly # Trigger monthly reset check here
    fi
    load_config # Ensure latest config is loaded

    local current_rx=$(cat "/sys/class/net/$INTERFACE/statistics/rx_bytes" 2>/dev/null || echo 0)
    local current_tx=$(cat "/sys/class/net/$INTERFACE/statistics/tx_bytes" 2>/dev/null || echo 0)
    
    local monthly_rx=$((current_rx - MONTHLY_START_RX))
    local monthly_tx=$((current_tx - MONTHLY_START_TX))
    local monthly_total=$((monthly_rx + monthly_tx))

    # If negative (possibly due to interface reset), or initial values are anomalous (e.g., 0 but current traffic exists), use vnStat as fallback
    if [ "$monthly_total" -lt 0 ] || ([ "$MONTHLY_START_RX" -eq 0 ] && [ "$MONTHLY_START_TX" -eq 0 ] && [ "$current_rx" -gt 0 ] && [ "$current_tx" -gt 0 ] ); then
        log_message "WARN" "当月流量计算出现负数或起始值异常，尝试使用vnStat备选。"
        monthly_total=$(get_vnstat_monthly_bytes)
    fi
    
    echo "$monthly_total"
}

# vnStat fallback method - Get daily traffic bytes
get_vnstat_daily_bytes() {
    local today=$(date +%Y-%m-%d)
    local vnstat_bytes=0
    
    # Prioritize JSON output (vnStat 2.x version support)
    if command -v jq &> /dev/null; then
        local json_output
        json_output=$(vnstat -i "$INTERFACE" --json d 2>/dev/null || true)
        if [ $? -eq 0 ] && [ -n "$json_output" ] && echo "$json_output" | jq -e '.interfaces[0].traffic.day | length > 0' &>/dev/null; then
            # Find today's data, ensure rx/tx exist, otherwise default to 0
            local rx_bytes=$(echo "$json_output" | jq -r ".interfaces[0].traffic.day[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m) and .date.day == $(date +%-d)) | .rx // 0" 2>/dev/null || echo 0)
            local tx_bytes=$(echo "$json_output" | jq -r ".interfaces[0].traffic.day[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m) and .date.day == $(date +%-d)) | .tx // 0" 2>/dev/null || echo 0)
            
            # Ensure jq output is numeric
            if [[ "$rx_bytes" =~ ^[0-9]+$ ]] && [[ "$tx_bytes" =~ ^[0-9]+$ ]]; then
                vnstat_bytes=$((rx_bytes + tx_bytes))
            else
                log_message "WARN" "vnStat JSON输出的RX/TX不是数字，尝试回退到文本解析。"
            fi
        else
            log_message "WARN" "vnStat JSON输出为空或无效，尝试回退到文本解析。"
        fi
    fi
    
    # If JSON parsing failed or jq is not installed, fallback to parsing text output
    if [ "$vnstat_bytes" -eq 0 ]; then
        local vnstat_line
        vnstat_line=$(vnstat -i "$INTERFACE" -d | grep "$today" | tail -1 || true)
        if [ -n "$vnstat_line" ]; then
            local rx_str=$(echo "$vnstat_line" | awk '{print $2}')
            local tx_str=$(echo "$vnstat_line" | awk '{print $3}')
            vnstat_bytes=$(($(convert_to_bytes "$rx_str") + $(convert_to_bytes "$tx_str")))
            log_message "INFO" "使用vnStat文本输出获取今日流量: $vnstat_bytes 字节。"
        else
            log_message "WARN" "无法从vnStat文本输出中获取今日流量。"
        fi
    fi
    
    echo "$vnstat_bytes"
}

# vnStat fallback method - Get monthly traffic bytes
get_vnstat_monthly_bytes() {
    local this_month=$(date +%Y-%m)
    local vnstat_bytes=0
    
    # Prioritize JSON output
    if command -v jq &> /dev/null; then
        local json_output
        json_output=$(vnstat -i "$INTERFACE" --json m 2>/dev/null || true)
        if [ $? -eq 0 ] && [ -n "$json_output" ] && echo "$json_output" | jq -e '.interfaces[0].traffic.month | length > 0' &>/dev/null; then
            # Find current month's data, ensure rx/tx exist, otherwise default to 0
            local rx_bytes=$(echo "$json_output" | jq -r ".interfaces[0].traffic.month[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m)) | .rx // 0" 2>/dev/null || echo 0)
            local tx_bytes=$(echo "$json_output" | jq -r ".interfaces[0].traffic.month[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m)) | .tx // 0" 2>/dev/null || echo 0)
            
            if [[ "$rx_bytes" =~ ^[0-9]+$ ]] && [[ "$tx_bytes" =~ ^[0-9]+$ ]]; then
                vnstat_bytes=$((rx_bytes + tx_bytes))
            else
                log_message "WARN" "vnStat JSON输出的RX/TX不是数字，尝试回退到文本解析。"
            fi
        else
            log_message "WARN" "vnStat JSON输出为空或无效，尝试回退到文本解析。"
        fi
    fi
    
    # If JSON parsing failed or jq is not installed, fallback to parsing text output
    if [ "$vnstat_bytes" -eq 0 ]; then
        local vnstat_line
        vnstat_line=$(vnstat -i "$INTERFACE" -m | grep "$this_month" | tail -1 || true)
        if [ -n "$vnstat_line" ]; then
            # Assume format: 2023-12 | 100.00 GiB | 50.00 GiB | 150.00 GiB | *
            local rx_str=$(echo "$vnstat_line" | awk '{print $2}')
            local tx_str=$(echo "$vnstat_line" | awk '{print $3}')
            vnstat_bytes=$(($(convert_to_bytes "$rx_str") + $(convert_to_bytes "$tx_str")))
            log_message "INFO" "使用vnStat文本输出获取当月流量: $vnstat_bytes 字节。"
        else
            log_message "WARN" "无法从vnStat文本输出中获取当月流量。"
        fi
    fi
    
    echo "$vnstat_bytes"
}

# 转换流量单位为字节 (Convert traffic units to bytes)
convert_to_bytes() {
    local input="$1"
    if [ -z "$input" ] || [ "$input" = "--" ]; then
        echo 0
        return
    fi
    
    local number=$(echo "$input" | sed 's/[^0-9.]//g')
    local unit=$(echo "$input" | sed 's/[0-9.]//g' | tr '[:lower:]' '[:upper:]')
    
    if [ -z "$number" ]; then
        echo 0
        return
    fi
    
    # bc for floating point multiplication, cut -d. -f1 for integer part
    case "$unit" in
        "KIB"|"KB"|"K") echo "$number * 1024" | bc | cut -d. -f1 ;;
        "MIB"|"MB"|"M") echo "$number * 1024 * 1024" | bc | cut -d. -f1 ;;
        "GIB"|"GB"|"G") echo "$number * 1024 * 1024 * 1024" | bc | cut -d. -f1 ;;
        "TIB"|"TB"|"T") echo "$number * 1024 * 1024 * 1024 * 1024" | bc | cut -d. -f1 ;;
        *) echo "$number" | cut -d. -f1 ;; # Default to bytes
    esac
}

# 格式化流量显示 (Format traffic display)
format_traffic() {
    local bytes=$1
    # Avoid division by zero
    if [ -z "$bytes" ] || [ "$bytes" -eq 0 ]; then
        echo "0B"
        return
    fi

    if [ "$bytes" -lt 1024 ]; then
        echo "${bytes}B"
    elif [ "$bytes" -lt 1048576 ]; then
        local kb=$(echo "scale=2; $bytes / 1024" | bc)
        echo "${kb}KB"
    elif [ "$bytes" -lt 1073741824 ]; then
        local mb=$(echo "scale=2; $bytes / 1024 / 1024" | bc)
        echo "${mb}MB"
    else
        local gb=$(echo "scale=3; $bytes / 1024 / 1024 / 1024" | bc)
        echo "${gb}GB"
    fi
}

# 强制刷新vnStat和重新计算 (Force refresh vnStat and recalculate)
force_refresh() {
    echo -e "${YELLOW}强制刷新流量统计...${NC}" # Forcing traffic stats refresh...
    log_message "INFO" "执行强制刷新流量统计。"
    
    # Force vnStat to write data and restart service
    vnstat -i "$INTERFACE" --force 2>/dev/null || log_message "WARN" "vnStat --force 失败，接口可能不存在。"
    systemctl restart vnstat 2>/dev/null || log_message "WARN" "重启 vnstat 服务失败。"
    sleep 3 # Give vnStat time to update
    
    # Reload configuration
    load_config
    
    # Record current status, calling get_daily/monthly_usage_bytes here will trigger internal check_and_reset_daily/monthly
    local daily_usage=$(get_daily_usage_bytes false)
    local monthly_usage=$(get_monthly_usage_bytes false)
    
    log_message "INFO" "强制刷新完成: 今日使用=$(format_traffic "$daily_usage"), 本月使用=$(format_traffic "$monthly_usage")"
    
    echo -e "${GREEN}刷新完成${NC}" # Refresh complete.
}

# 检查是否达到每日限制 (Check if daily limit is reached)
check_daily_limit() {
    local used_bytes=$(get_daily_usage_bytes false) # Pass false to avoid internal reset check here
    local used_gb=$(echo "scale=3; $used_bytes / 1024 / 1024 / 1024" | bc 2>/dev/null || echo "0")
    local limit_reached=$(echo "$used_gb >= $DAILY_LIMIT" | bc 2>/dev/null || echo "0")
    echo "$limit_reached"
}

# 检查是否达到每月限制 (目前仅用于显示，不触发自动限速)
check_monthly_limit() {
    local used_bytes=$(get_monthly_usage_bytes false) # Pass false to avoid internal reset check here
    local used_gb=$(echo "scale=3; $used_bytes / 1024 / 1024 / 1024" | bc 2>/dev/null || echo "0")
    local limit_reached=$(echo "$used_gb >= $MONTHLY_LIMIT" | bc 2>/dev/null || echo "0")
    echo "$limit_reached"
}

# 应用限速 (Apply speed limit)
apply_speed_limit() {
    echo -e "${YELLOW}应用限速设置...${NC}" # Applying speed limit settings...
    log_message "INFO" "尝试应用限速。"
    
    # Check if interface is valid
    if ! ip link show "$INTERFACE" &>/dev/null; then
        echo -e "${RED}错误: 网卡 '$INTERFACE' 不存在或无效，无法应用限速。${NC}" # Error: Interface '$INTERFACE' does not exist or is invalid, cannot apply speed limit.
        log_message "ERROR" "网卡 '$INTERFACE' 无效，无法应用限速。"
        return 1
    fi

    # Clear existing rules, ignore errors
    tc qdisc del dev "$INTERFACE" root 2>/dev/null || log_message "WARN" "删除旧的TC qdisc 失败或不存在。"
    
    # Set speed limit (convert KB/s to bit/s)
    local speed_bps=$((SPEED_LIMIT * 8 * 1024))
    
    # Add qdisc and class
    if ! tc qdisc add dev "$INTERFACE" root handle 1: htb default 30; then
        echo -e "${RED}错误: 无法添加 HTB qdisc。${NC}" # Error: Unable to add HTB qdisc.
        log_message "ERROR" "无法添加 HTB qdisc。"
        return 1
    fi
    if ! tc class add dev "$INTERFACE" parent 1: classid 1:1 htb rate "${speed_bps}bit"; then
        echo -e "${RED}错误: 无法添加 HTB class 1:1。${NC}" # Error: Unable to add HTB class 1:1.
        log_message "ERROR" "无法添加 HTB class 1:1。"
        return 1
    fi
    if ! tc class add dev "$INTERFACE" parent 1:1 classid 1:10 htb rate "${speed_bps}bit" ceil "${speed_bps}bit"; then
        echo -e "${RED}错误: 无法添加 HTB class 1:10。${NC}" # Error: Unable to add HTB class 1:10.
        log_message "ERROR" "无法添加 HTB class 1:10。"
        return 1
    fi
    if ! tc filter add dev "$INTERFACE" protocol ip parent 1:0 prio 1 u32 match ip dst 0.0.0.0/0 flowid 1:10; then
        echo -e "${RED}错误: 无法添加 TC filter。${NC}" # Error: Unable to add TC filter.
        log_message "ERROR" "无法添加 TC filter。"
        return 1
    fi
    
    sed -i "s/^LIMIT_ENABLED=.*/LIMIT_ENABLED=true/" "$CONFIG_FILE" || log_message "ERROR" "更新 LIMIT_ENABLED 失败。"
    log_message "INFO" "限速已启用: ${SPEED_LIMIT}KB/s"
    echo -e "${GREEN}限速已启用: ${SPEED_LIMIT}KB/s${NC}" # Speed limit enabled:
    return 0
}

# 移除限速 (Remove speed limit)
remove_speed_limit() {
    echo -e "${YELLOW}移除限速设置...${NC}" # Removing speed limit settings...
    log_message "INFO" "尝试移除限速。"
    tc qdisc del dev "$INTERFACE" root 2>/dev/null || log_message "WARN" "删除旧的TC qdisc 失败或不存在。"
    sed -i "s/^LIMIT_ENABLED=.*/LIMIT_ENABLED=false/" "$CONFIG_FILE" || log_message "ERROR" "更新 LIMIT_ENABLED 失败。"
    log_message "INFO" "限速已移除。"
    echo -e "${GREEN}限速已移除${NC}" # Speed limit removed.
}

# 网速测试 (Network speed test)
speed_test() {
    echo -e "${BLUE}开始网络速度测试...${NC}" # Starting network speed test...
    echo -e "${YELLOW}注意: 测试会消耗流量，请确认继续 (y/N): ${NC}" # Warning: Test will consume traffic, please confirm to continue (y/N):
    read -rp "请输入 (y/N): " confirm_test # Please enter (y/N):
    if [[ ! "$confirm_test" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}已取消测试${NC}" # Test cancelled.
        log_message "INFO" "用户取消了速度测试。"
        return
    fi
    
    # Record traffic before test
    local before_bytes=$(get_daily_usage_bytes true) # Pass true to avoid triggering reset during test
    local before_time=$(date '+%Y-%m-%d %H:%M:%S')
    log_message "INFO" "开始速度测试，测试前流量: $(format_traffic "$before_bytes")"

    if ! command -v speedtest-cli &> /dev/null; then
        echo -e "${YELLOW}安装speedtest-cli...${NC}" # Installing speedtest-cli...
        if ! apt install -y speedtest-cli; then
            echo -e "${RED}错误: 无法安装 speedtest-cli。请检查网络或apt源。${NC}" # Error: Unable to install speedtest-cli.
            log_message "ERROR" "安装 speedtest-cli 失败。"
            return 1
        fi
    fi
    
    speedtest-cli --simple || { 
        echo -e "${RED}错误: speedtest-cli 运行失败。${NC}"; 
        log_message "ERROR" "speedtest-cli 运行失败。"; 
        return 1; 
    }
    
    echo -e "${YELLOW}测试完成，正在计算流量消耗...${NC}" # Test complete, calculating traffic consumption...
    sleep 2 # Give system some time to update statistics
    
    # Force refresh and calculate consumption
    force_refresh
    local after_bytes=$(get_daily_usage_bytes true)
    local test_usage=$((after_bytes - before_bytes))
    
    if [ "$test_usage" -gt 0 ]; then
        echo -e "${GREEN}本次测试消耗流量: $(format_traffic "$test_usage")${NC}" # Traffic consumed by this test:
        log_message "INFO" "速度测试消耗: $(format_traffic "$test_usage")"
    else
        echo -e "${YELLOW}流量消耗计算可能不准确，请查看总使用量或稍后重试${NC}" # Traffic consumption calculation might be inaccurate, please check total usage or try again later.
        log_message "WARN" "速度测试后流量消耗计算结果不准确 ($test_usage 字节)。"
    fi
}

# 显示详细流量统计 (Show detailed traffic statistics)
show_detailed_stats() {
    load_config
    local today=$(date +%Y-%m-%d)
    local this_month=$(date +%Y-%m)
    
    clear # Clear screen for better display

    echo -e "${CYAN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                    详细流量统计                              ║${NC}" # Detailed Traffic Statistics
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    
    # Get precise daily/monthly traffic usage (with fallback logic)
    local precise_daily_total=$(get_daily_usage_bytes)
    local precise_monthly_total=$(get_monthly_usage_bytes)

    echo -e "${WHITE}系统网卡统计 ($INTERFACE):${NC}" # System Network Interface Statistics
    local current_rx_raw=$(cat "/sys/class/net/$INTERFACE/statistics/rx_bytes" 2>/dev/null || echo 0)
    local current_tx_raw=$(cat "/sys/class/net/$INTERFACE/statistics/tx_bytes" 2>/dev/null || echo 0)
    echo -e "  总接收: $(format_traffic "$current_rx_raw")" # Total received:
    echo -e "  总发送: $(format_traffic "$current_tx_raw")" # Total sent:
    echo ""

    echo -e "${WHITE}今日统计 (${LAST_RESET_DATE}):${NC}" # Today's Statistics:
    echo -e "  今日总计: ${GREEN}$(format_traffic "$precise_daily_total")${NC}" # Today's total:
    echo -e "  (通过系统网卡计数与vnStat备选精确计算)" # (Precisely calculated via system interface counters and vnStat fallback)
    echo ""

    echo -e "${WHITE}本月统计 (${LAST_MONTHLY_RESET_DATE}):${NC}" # This Month's Statistics:
    echo -e "  本月总计: ${GREEN}$(format_traffic "$precise_monthly_total")${NC}" # This month's total:
    echo -e "  (通过系统网卡计数与vnStat备选精确计算)" # (Precisely calculated via system interface counters and vnStat fallback)
    echo ""
    
    # vnStat Raw Statistics (for reference)
    local vnstat_daily_bytes=$(get_vnstat_daily_bytes)
    local vnstat_monthly_bytes=$(get_vnstat_monthly_bytes)
    echo -e "${WHITE}vnStat 原始统计 (仅供参考):${NC}" # vnStat Raw Statistics (for reference only):
    echo -e "  今日 vnStat 显示: $(format_traffic "$vnstat_daily_bytes")" # Today's vnStat display:
    echo -e "  本月 vnStat 显示: $(format_traffic "$vnstat_monthly_bytes")" # This month's vnStat display:
    echo ""
    
    # Display recent logs
    echo -e "${WHITE}最近活动日志:${NC}" # Recent Activity Log:
    if [ -f "$TRAFFIC_LOG" ]; then
        if [ "$(wc -l < "$TRAFFIC_LOG")" -gt 0 ]; then
            tail -n 5 "$TRAFFIC_LOG" | while IFS= read -r line; do
                echo -e "  ${YELLOW}$line${NC}"
            done
        else
            echo -e "  ${YELLOW}暂无日志记录${NC}" # No log records yet.
        fi
    else
        echo -e "  ${YELLOW}日志文件不存在: $TRAFFIC_LOG${NC}" # Log file does not exist:
    fi
    echo ""
    
    # Configuration Information
    echo -e "${WHITE}当前配置:${NC}" # Current Configuration:
    echo -e "  每日限制: ${DAILY_LIMIT}GB" # Daily Limit:
    echo -e "  每月限制: ${MONTHLY_LIMIT}GB" # Monthly Limit:
    echo -e "  限速速度: ${SPEED_LIMIT}KB/s" # Speed Limit:
    echo -e "  网络接口: $INTERFACE" # Network Interface:
    echo -e "  今日计数起始日期: $LAST_RESET_DATE" # Daily Count Start Date:
    echo -e "  今日起始RX: $(format_traffic "$DAILY_START_RX")" # Daily Start RX:
    echo -e "  今日起始TX: $(format_traffic "$DAILY_START_TX")" # Daily Start TX:
    echo -e "  本月计数起始日期: $LAST_MONTHLY_RESET_DATE" # Monthly Count Start Date:
    echo -e "  本月起始RX: $(format_traffic "$MONTHLY_START_RX")" # Monthly Start RX:
    echo -e "  本月起始TX: $(format_traffic "$MONTHLY_START_TX")" # Monthly Start TX:
    echo ""
    echo -e "${YELLOW}提示: 要修改限制值，请编辑配置文件: $CONFIG_FILE${NC}" # Hint: To modify limit values, please edit the configuration file:
    echo ""
}

# 创建监控服务 (Create monitor service)
create_monitor_service() {
    # Systemd Service File
    cat > "$SERVICE_FILE" << EOF
[Unit]
Description=CE Traffic Monitor Service
After=network.target

[Service]
Type=oneshot
ExecStart=$MONITOR_SCRIPT
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF

    # Monitor Script (executed by systemd)
    cat > "$MONITOR_SCRIPT" << 'EOF'
#!/bin/bash
# Note: This script runs in a systemd service, its independence must be ensured
set -euo pipefail

CONFIG_FILE="/etc/ce_traffic_limit.conf"
TRAFFIC_LOG="/var/log/ce-daily-traffic.log"

# Log function for monitor script
log_monitor_message() {
    local type="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ce-monitor ${type}: $message" >> "$TRAFFIC_LOG"
}

# Load configuration
load_monitor_config() {
    if [ -f "$CONFIG_FILE" ] && [ -r "$CONFIG_FILE" ]; then
        # shellcheck source=/dev/null
        source "$CONFIG_FILE"
    else
        log_monitor_message "ERROR" "配置文件 $CONFIG_FILE 不存在或无法读取，监控服务无法运行。"
        exit 1
    fi
}

# Traffic statistics function (copied from main script's key logic)
get_current_usage_bytes_raw_monitor() {
    local current_rx_b=$(cat "/sys/class/net/$INTERFACE/statistics/rx_bytes" 2>/dev/null || echo 0)
    local current_tx_b=$(cat "/sys/class/net/$INTERFACE/statistics/tx_bytes" 2>/dev/null || echo 0)
    echo "$current_rx_b $current_tx_b"
}

# Convert traffic units to bytes (copied from main script's key logic)
convert_to_bytes_monitor() {
    local input="$1"
    if [ -z "$input" ] || [ "$input" = "--" ]; then echo 0; return; fi
    local number=$(echo "$input" | sed 's/[^0-9.]//g')
    local unit=$(echo "$input" | sed 's/[0-9.]//g' | tr '[:lower:]' '[:upper:]')
    if [ -z "$number" ]; then echo 0; return; fi
    case "$unit" in
        "KIB"|"KB"|"K") echo "$number * 1024" | bc | cut -d. -f1 ;;
        "MIB"|"MB"|"M") echo "$number * 1024 * 1024" | bc | cut -d. -f1 ;;
        "GIB"|"GB"|"G") echo "$number * 1024 * 1024 * 1024" | bc | cut -d. -f1 ;;
        "TIB"|"TB"|"T") echo "$number * 1024 * 1024 * 1024 * 1024" | bc | cut -d. -f1 ;;
        *) echo "$number" | cut -d. -f1 ;;
    esac
}

# vnStat fallback method - Daily (copied from main script's key logic)
get_vnstat_daily_bytes_monitor() {
    local today_m=$(date +%Y-%m-%d)
    local vnstat_bytes_m=0
    if command -v jq &> /dev/null; then
        local json_output_m=$(vnstat -i "$INTERFACE" --json d 2>/dev/null || true)
        if [ $? -eq 0 ] && [ -n "$json_output_m" ] && echo "$json_output_m" | jq -e '.interfaces[0].traffic.day | length > 0' &>/dev/null; then
            local rx_bytes_m=$(echo "$json_output_m" | jq -r ".interfaces[0].traffic.day[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m) and .date.day == $(date +%-d)) | .rx // 0" 2>/dev/null || echo 0)
            local tx_bytes_m=$(echo "$json_output_m" | jq -r ".interfaces[0].traffic.day[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m) and .date.day == $(date +%-d)) | .tx // 0" 2>/dev/null || echo 0)
            if [[ "$rx_bytes_m" =~ ^[0-9]+$ ]] && [[ "$tx_bytes_m" =~ ^[0-9]+$ ]]; then vnstat_bytes_m=$((rx_bytes_m + tx_bytes_m)); fi
        fi
    fi
    if [ "$vnstat_bytes_m" -eq 0 ]; then
        local vnstat_line_m=$(vnstat -i "$INTERFACE" -d | grep "$today_m" | tail -1 || true)
        if [ -n "$vnstat_line_m" ]; then
            local rx_str_m=$(echo "$vnstat_line_m" | awk '{print $2}')
            local tx_str_m=$(echo "$vnstat_line_m" | awk '{print $3}')
            vnstat_bytes_m=$(($(convert_to_bytes_monitor "$rx_str_m") + $(convert_to_bytes_monitor "$tx_str_m")))
        fi
    fi
    echo "$vnstat_bytes_m"
}

# vnStat fallback method - Monthly (copied from main script's key logic)
get_vnstat_monthly_bytes_monitor() {
    local this_month_m=$(date +%Y-%m)
    local vnstat_bytes_m=0
    if command -v jq &> /dev/null; then
        local json_output_m=$(vnstat -i "$INTERFACE" --json m 2>/dev/null || true)
        if [ $? -eq 0 ] && [ -n "$json_output_m" ] && echo "$json_output_m" | jq -e '.interfaces[0].traffic.month | length > 0' &>/dev/null; then
            local rx_bytes_m=$(echo "$json_output_m" | jq -r ".interfaces[0].traffic.month[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m)) | .rx // 0" 2>/dev/null || echo 0)
            local tx_bytes_m=$(echo "$json_output_m" | jq -r ".interfaces[0].traffic.month[] | select(.date.year == $(date +%Y) and .date.month == $(date +%-m)) | .tx // 0" 2>/dev/null || echo 0)
            if [[ "$rx_bytes_m" =~ ^[0-9]+$ ]] && [[ "$tx_bytes_m" =~ ^[0-9]+$ ]]; then vnstat_bytes_m=$((rx_bytes_m + tx_bytes_m)); fi
        fi
    fi
    if [ "$vnstat_bytes_m" -eq 0 ]; then
        local vnstat_line_m=$(vnstat -i "$INTERFACE" -m | grep "$this_month_m" | tail -1 || true)
        if [ -n "$vnstat_line_m" ]; then
            local rx_str_m=$(echo "$vnstat_line_m" | awk '{print $2}')
            local tx_str_m=$(echo "$vnstat_line_m" | awk '{print $3}')
            vnstat_bytes_m=$(($(convert_to_bytes_monitor "$rx_str_m") + $(convert_to_bytes_monitor "$tx_str_m")))
        fi
    fi
    echo "$vnstat_bytes_m"
}

# Main monitoring logic
load_monitor_config

# --- Daily Reset Logic ---
current_day=$(date +%Y-%m-%d)
if [ "$current_day" != "$LAST_RESET_DATE" ]; then
    log_monitor_message "INFO" "检测到新的一天 ($current_day)，重置每日计数器和限速状态。"
    current_stats=($(get_current_usage_bytes_raw_monitor))
    current_rx_for_reset=${current_stats[0]}
    current_tx_for_reset=${current_stats[1]}

    # Update starting values and date in the config file
    sed -i "s/^DAILY_START_RX=.*/DAILY_START_RX=$current_rx_for_reset/" "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 DAILY_START_RX 失败。"
    sed -i "s/^DAILY_START_TX=.*/DAILY_START_TX=$current_tx_for_reset/" "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 DAILY_START_TX 失败。"
    sed -i "s/^LAST_RESET_DATE=.*/LAST_RESET_DATE=$current_day/" "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 LAST_RESET_DATE 失败。"
    
    if [ "$LIMIT_ENABLED" = "true" ]; then
        tc qdisc del dev "$INTERFACE" root 2>/dev/null || log_monitor_message "WARN" "monitor: 删除旧的TC qdisc 失败或不存在。"
        sed -i 's/^LIMIT_ENABLED=.*/LIMIT_ENABLED=false/' "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 LIMIT_ENABLED 失败。"
        log_monitor_message "INFO" "新的一天，自动解除限速。"
    fi
    # Reload configuration, ensure subsequent operations use latest values
    load_monitor_config
fi

# --- Monthly Reset Logic ---
current_month=$(date +%Y-%m)
if [ "$current_month" != "$LAST_MONTHLY_RESET_DATE" ]; then
    log_monitor_message "INFO" "检测到新的月份 ($current_month)，重置每月计数器。"
    current_stats=($(get_current_usage_bytes_raw_monitor))
    current_rx_for_reset=${current_stats[0]}
    current_tx_for_reset=${current_stats[1]}

    sed -i "s/^MONTHLY_START_RX=.*/MONTHLY_START_RX=$current_rx_for_reset/" "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 MONTHLY_START_RX 失败。"
    sed -i "s/^MONTHLY_START_TX=.*/MONTHLY_START_TX=$current_tx_for_reset/" "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 MONTHLY_START_TX 失败。"
    sed -i "s/^LAST_MONTHLY_RESET_DATE=.*/LAST_MONTHLY_RESET_DATE=$current_month/" "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 LAST_MONTHLY_RESET_DATE 失败。"
    # Reload configuration, ensure subsequent operations use latest values
    load_monitor_config
fi


# Get daily traffic usage
daily_current_rx=$(cat "/sys/class/net/$INTERFACE/statistics/rx_bytes" 2>/dev/null || echo 0)
daily_current_tx=$(cat "/sys/class/net/$INTERFACE/statistics/tx_bytes" 2>/dev/null || echo 0)
daily_total_bytes=$(( (daily_current_rx - DAILY_START_RX) + (daily_current_tx - DAILY_START_TX) ))

# If system stats are negative, or initial values are anomalous, use vnStat as fallback
if [ "$daily_total_bytes" -lt 0 ] || ([ "$DAILY_START_RX" -eq 0 ] && [ "$DAILY_START_TX" -eq 0 ] && [ "$daily_current_rx" -gt 0 ] && [ "$daily_current_tx" -gt 0 ] ); then
    log_monitor_message "WARN" "每日流量计算负数或起始值异常，使用vnStat备选。"
    daily_total_bytes=$(get_vnstat_daily_bytes_monitor)
fi

# Ensure division by zero is handled for bc
used_gb=$(echo "scale=3; $daily_total_bytes / 1024 / 1024 / 1024" | bc 2>/dev/null || echo "0")
limit_reached=$(echo "$used_gb >= $DAILY_LIMIT" | bc 2>/dev/null || echo "0")

if [ "$limit_reached" -eq 1 ] && [ "$LIMIT_ENABLED" != "true" ]; then
    # Automatically enable speed limit
    local speed_bps=$((SPEED_LIMIT * 8 * 1024))
    tc qdisc del dev "$INTERFACE" root 2>/dev/null || log_monitor_message "WARN" "monitor: 删除旧的TC qdisc 失败或不存在 (自动限速前)。"
    
    if ! tc qdisc add dev "$INTERFACE" root handle 1: htb default 30; then log_monitor_message "ERROR" "monitor: 无法添加 HTB qdisc (自动限速)。"; exit 1; fi
    if ! tc class add dev "$INTERFACE" parent 1: classid 1:1 htb rate "${speed_bps}bit"; then log_monitor_message "ERROR" "monitor: 无法添加 HTB class 1:1 (自动限速)。"; exit 1; fi
    if ! tc class add dev "$INTERFACE" parent 1:1 classid 1:10 htb rate "${speed_bps}bit" ceil "${speed_bps}bit"; then log_monitor_message "ERROR" "monitor: 无法添加 HTB class 1:10 (自动限速)。"; exit 1; }
    if ! tc filter add dev "$INTERFACE" protocol ip parent 1:0 prio 1 u32 match ip dst 0.0.0.0/0 flowid 1:10; then log_monitor_message "ERROR" "monitor: 无法添加 TC filter (自动限速)。"; exit 1; fi
    
    sed -i 's/^LIMIT_ENABLED=.*/LIMIT_ENABLED=true/' "$CONFIG_FILE" || log_monitor_message "ERROR" "monitor: 更新 LIMIT_ENABLED 失败 (自动限速)。"
    
    log_monitor_message "INFO" "自动限速触发: 使用量=${used_gb}GB, 速度=${SPEED_LIMIT}KB/s"
fi
EOF

    chmod +x "$MONITOR_SCRIPT" || log_message "ERROR" "设置监控脚本可执行权限失败。"
    systemctl daemon-reload || log_message "ERROR" "daemon-reload 失败。"
    echo -e "${GREEN}监控服务脚本已创建: $MONITOR_SCRIPT${NC}" # Monitor script created:
    echo -e "${GREEN}Systemd 服务文件已创建: $SERVICE_FILE${NC}" # Systemd service file created:
    log_message "INFO" "监控服务脚本和Systemd服务文件已创建。"
}

# 创建定时器 (Create timer)
create_timer() {
    cat > "$TIMER_FILE" << EOF
[Unit]
Description=CE Traffic Monitor Timer
Requires=ce-traffic-monitor.service

[Timer]
# Run the service every 3 minutes
OnCalendar=*:0/3
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload || log_message "ERROR" "daemon-reload 失败。"
    systemctl enable ce-traffic-monitor.timer || log_message "ERROR" "启用定时器失败。"
    systemctl start ce-traffic-monitor.timer || log_message "ERROR" "启动定时器失败。"
    echo -e "${GREEN}Systemd 定时器已创建并启动: $TIMER_FILE${NC}" # Systemd timer created and started:
    log_message "INFO" "Systemd 定时器已创建并启动。"
}

# 显示实时状态 (Show real-time status)
show_status() {
    clear # Clear screen for better display
    load_config
    
    echo -e "${CYAN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                    CE 流量限速管理系统                       ║${NC}" # CE Traffic Limiting Management System
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    
    # System Information
    echo -e "${WHITE}系统版本:${NC} $(lsb_release -d | cut -f2 || echo "未知")" # System version:
    echo -e "${WHITE}网络接口:${NC} $INTERFACE" # Network interface:
    echo -e "${WHITE}vnStat版本:${NC} $(vnstat --version 2>/dev/null | head -1 | awk '{print $2}' || echo "未知")" # vnStat version: (Unknown)
    echo -e "${WHITE}更新时间:${NC} $(date '+%Y-%m-%d %H:%M:%S')" # Update time:
    echo ""
    
    # Traffic usage - Daily
    local used_daily_bytes=$(get_daily_usage_bytes)
    local used_daily_gb=$(echo "scale=3; $used_daily_bytes / 1024 / 1024 / 1024" | bc 2>/dev/null || echo "0")
    local remaining_daily_gb=$(echo "scale=3; $DAILY_LIMIT - $used_daily_gb" | bc 2>/dev/null || echo "$DAILY_LIMIT")
    local percentage_daily=$(echo "scale=1; $used_daily_gb * 100 / $DAILY_LIMIT" | bc 2>/dev/null || echo "0")
    
    echo -e "${WHITE}今日流量使用 (精确统计 - ${LAST_RESET_DATE}):${NC}" # Today's traffic usage (Precise statistics - ):
    echo -e "  已用: ${GREEN}${used_daily_gb}GB${NC} / ${YELLOW}${DAILY_LIMIT}GB${NC} (${percentage_daily}%)" # Used: / (percentage)%
    echo -e "  剩余: ${CYAN}${remaining_daily_gb}GB${NC}" # Remaining:
    echo -e "  总计: $(format_traffic "$used_daily_bytes")" # Total:
    
    # Daily progress bar
    local bar_length=50
    local filled_length=$(printf "%.0f" "$(echo "$percentage_daily * $bar_length / 100" | bc 2>/dev/null)")
    [ -z "$filled_length" ] && filled_length=0
    
    local bar_daily=""
    local bar_daily_color=""
    if (( $(echo "$percentage_daily >= 90" | bc -l) )); then # Using bc -l for float comparison
        bar_daily_color="$RED"
    elif (( $(echo "$percentage_daily >= 70" | bc -l) )); then
        bar_daily_color="$YELLOW"
    else
        bar_daily_color="$GREEN"
    fi
    
    for ((i=0; i<bar_length; i++)); do
        if [ "$i" -lt "$filled_length" ]; then
            bar_daily+="█"
        else
            bar_daily+="░"
        fi
    done
    echo -e "  [${bar_daily_color}$bar_daily${NC}]"
    echo ""

    # Traffic usage - Monthly
    local used_monthly_bytes=$(get_monthly_usage_bytes)
    local used_monthly_gb=$(echo "scale=3; $used_monthly_bytes / 1024 / 1024 / 1024" | bc 2>/dev/null || echo "0")
    local remaining_monthly_gb=$(echo "scale=3; $MONTHLY_LIMIT - $used_monthly_gb" | bc 2>/dev/null || echo "$MONTHLY_LIMIT")
    local percentage_monthly=$(echo "scale=1; $used_monthly_gb * 100 / $MONTHLY_LIMIT" | bc 2>/dev/null || echo "0")
    
    echo -e "${WHITE}本月流量使用 (精确统计 - ${LAST_MONTHLY_RESET_DATE}):${NC}" # This month's traffic usage (Precise statistics - ):
    echo -e "  已用: ${GREEN}${used_monthly_gb}GB${NC} / ${YELLOW}${MONTHLY_LIMIT}GB${NC} (${percentage_monthly}%)" # Used: / (percentage)%
    echo -e "  剩余: ${CYAN}${remaining_monthly_gb}GB${NC}" # Remaining:
    echo -e "  总计: $(format_traffic "$used_monthly_bytes")" # Total:

    # Monthly progress bar
    local monthly_filled_length=$(printf "%.0f" "$(echo "$percentage_monthly * $bar_length / 100" | bc 2>/dev/null)")
    [ -z "$monthly_filled_length" ] && monthly_filled_length=0
    
    local bar_monthly=""
    local bar_monthly_color=""
    if (( $(echo "$percentage_monthly >= 90" | bc -l) )); then
        bar_monthly_color="$RED"
    elif (( $(echo "$percentage_monthly >= 70" | bc -l) )); then
        bar_monthly_color="$YELLOW"
    else
        bar_monthly_color="$GREEN"
    fi
    
    for ((i=0; i<bar_length; i++)); do
        if [ "$i" -lt "$monthly_filled_length" ]; then
            bar_monthly+="█"
        else
            bar_monthly+="░"
        fi
    done
    echo -e "  [${bar_monthly_color}$bar_monthly${NC}]"
    echo ""
    
    # Speed limit status
    if [ "$LIMIT_ENABLED" = "true" ]; then
        echo -e "${RED}⚠️  限速状态: 已启用 (${SPEED_LIMIT}KB/s)${NC}" # Speed limit status: Enabled
    else
        echo -e "${GREEN}✅ 限速状态: 未启用${NC}" # Speed limit status: Not enabled
    fi
    echo ""
}

# 主菜单 (Main Menu)
show_menu() {
    echo -e "${CYAN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                          操作菜单                            ║${NC}" # Operation Menu
    echo -e "${CYAN}╠════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${CYAN}║  ${WHITE}1.${NC} 开启流量限速 (Enable traffic limiting)                         ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}2.${NC} 解除流量限速 (Disable traffic limiting)                        ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}3.${NC} 网络速度测试 (Network speed test)                            ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}4.${NC} 强制刷新统计 (Force refresh statistics)                      ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}5.${NC} 详细流量统计 (Detailed traffic statistics)                   ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}6.${NC} 重置今日计数 (Reset daily counter)                           ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}7.${NC} 重置每月计数 (Reset monthly counter)                         ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}8.${NC} 卸载所有组件 (Uninstall all components)                      ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}9.${NC} 刷新显示 (Refresh display)                                   ${CYAN}║${NC}"
    echo -e "${CYAN}║  ${WHITE}0.${NC} 退出程序 (Exit program)                                      ${CYAN}║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# 重置今日计数 (Reset daily counter)
reset_daily_counter() {
    echo -e "${RED}确认重置今日流量计数? 这将重新开始计算今日流量 (y/N): ${NC}" # Confirm reset daily traffic counter? This will restart daily traffic calculation (y/N):
    read -rp "请输入 (y/N): " confirm_reset # Please enter (y/N):
    if [[ "$confirm_reset" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}重置今日流量计数器...${NC}" # Resetting daily traffic counter...
        
        # Record usage before reset
        local before_usage=$(get_daily_usage_bytes true) # Pass true to avoid recursive calls
        log_message "INFO" "手动重置每日计数器，重置前使用量: $(format_traffic "$before_usage")"
        
        # Reset counter
        init_daily_counter
        
        # If speed limit is currently active, ask to remove it
        if [ "$LIMIT_ENABLED" = "true" ]; then
            echo -e "${YELLOW}检测到当前有限速，是否同时解除限速? (y/N): ${NC}" # Detected current speed limit, remove it as well? (y/N):
            read -rp "请输入 (y/N): " remove_limit # Please enter (y/N):
            if [[ "$remove_limit" =~ ^[Yy]$ ]]; then
                remove_speed_limit
            fi
        fi
        
        echo -e "${GREEN}今日流量计数器已重置${NC}" # Daily traffic counter reset.
        log_message "INFO" "今日流量计数器已重置。"
    else
        echo -e "${YELLOW}操作取消。${NC}" # Operation cancelled.
        log_message "INFO" "用户取消了重置今日流量计数。"
    fi
}

# 重置每月计数 (Reset monthly counter)
reset_monthly_counter() {
    echo -e "${RED}确认重置每月流量计数? 这将重新开始计算每月流量 (y/N): ${NC}" # Confirm reset monthly traffic counter? This will restart monthly traffic calculation (y/N):
    read -rp "请输入 (y/N): " confirm_reset # Please enter (y/N):
    if [[ "$confirm_reset" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}重置每月流量计数器...${NC}" # Resetting monthly traffic counter...
        
        # Record usage before reset
        local before_usage=$(get_monthly_usage_bytes true) # Pass true to avoid recursive calls
        log_message "INFO" "手动重置每月计数器，重置前使用量: $(format_traffic "$before_usage")"
        
        # Reset counter
        init_monthly_counter
        
        echo -e "${GREEN}每月流量计数器已重置${NC}" # Monthly traffic counter reset.
        log_message "INFO" "每月流量计数器已重置。"
    else
        echo -e "${YELLOW}操作取消。${NC}" # Operation cancelled.
        log_message "INFO" "用户取消了重置每月流量计数。"
    fi
}

# 卸载功能 (Uninstall functionality)
uninstall_all() {
    echo -e "${RED}确认卸载所有组件? (y/N): ${NC}" # Confirm uninstall all components? (y/N):
    read -rp "请输入 (y/N): " confirm_uninstall # Please enter (y/N):
    if [[ "$confirm_uninstall" =~ ^[Yy]$ ]]; then
       echo -e "${YELLOW}卸载中...${NC}" # Uninstalling...
       log_message "INFO" "开始卸载所有组件。"
       
       # Stop and disable service and timer
       systemctl stop ce-traffic-monitor.timer 2>/dev/null || log_message "WARN" "停止定时器失败。"
       systemctl disable ce-traffic-monitor.timer 2>/dev/null || log_message "WARN" "禁用定时器失败。"
       systemctl stop ce-traffic-monitor.service 2>/dev/null || log_message "WARN" "停止服务失败。"
       systemctl disable ce-traffic-monitor.service 2>/dev/null || log_message "WARN" "禁用服务失败。"
       
       # Remove speed limit (INTERFACE variable might be lost, but tc command usually doesn't depend on config file)
       local current_interface=""
       if [ -f "$CONFIG_FILE" ]; then
           # shellcheck source=/dev/null
           source "$CONFIG_FILE" 2>/dev/null || true
           current_interface="$INTERFACE"
       fi
       
       # Attempt to remove existing qdisc, cover common interface names
       local interfaces_to_check=("${current_interface}" "eth0" "enp0s3" "ens33" "wlan0")
       for iface in "${interfaces_to_check[@]}"; do
           if [ -n "$iface" ]; then # Ensure interface name is not empty
               tc qdisc del dev "$iface" root 2>/dev/null || true
               log_message "INFO" "尝试移除接口 $iface 上的限速规则。"
           fi
       done
       
       # Delete files
       rm -f "$CONFIG_FILE" || log_message "WARN" "删除配置文件失败。"
       rm -f "$SERVICE_FILE" || log_message "WARN" "删除服务文件失败。"
       rm -f "$TIMER_FILE" || log_message "WARN" "删除定时器文件失败。"
       rm -f "$MONITOR_SCRIPT" || log_message "WARN" "删除监控脚本失败。"
       rm -f "$INSTALLER_PATH" || log_message "WARN" "删除安装器自身失败。"
       rm -f "$SCRIPT_PATH" || log_message "WARN" "删除快捷命令失败。"
       rm -f "$TRAFFIC_LOG" || log_message "WARN" "删除流量日志文件失败。"
       rm -f "/etc/vnstat.conf.backup" || log_message "WARN" "删除 vnStat 备份配置失败。"
       
       systemctl daemon-reload || log_message "ERROR" "daemon-reload 失败。"
       
       # Attempt to uninstall dependencies, but avoid removing commonly used packages
       echo -e "${YELLOW}尝试清理依赖 (vnstat, speedtest-cli)...${NC}" # Attempting to clean up dependencies (vnstat, speedtest-cli)...
       apt remove -y vnstat speedtest-cli 2>/dev/null || log_message "WARN" "卸载依赖失败或依赖不存在。"
       apt autoremove -y 2>/dev/null || log_message "WARN" "自动清理不再需要的包失败。"
       
       echo -e "${GREEN}卸载完成${NC}" # Uninstall complete.
       log_message "INFO" "所有组件已成功卸载。"
       exit 0
    else
        echo -e "${YELLOW}操作取消。${NC}" # Operation cancelled.
        log_message "INFO" "用户取消了卸载操作。"
    fi
}

# 交互界面 (Interactive Interface)
interactive_mode() {
    while true; do
        show_status
        show_menu
        
        read -rp "请选择操作 [0-9]: " choice # Please select an operation [0-9]:
        
        case "$choice" in
            1)
                apply_speed_limit
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
            2)
                remove_speed_limit
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
            3)
                speed_test
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
            4)
                force_refresh
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
            5)
                show_detailed_stats
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
            6)
                reset_daily_counter
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
            7)
                reset_monthly_counter
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
            8)
                uninstall_all
                ;;
            9)
                continue # Skip read -p, directly go to next loop to refresh display
                ;;
            0)
                echo -e "${GREEN}感谢使用 CE 流量限速管理系统${NC}" # Thank you for using CE Traffic Limiting Management System.
                exit 0
                ;;
            *)
                echo -e "${RED}无效选择，请重新输入${NC}" # Invalid choice, please re-enter.
                read -rp "按回车键继续..." # Press Enter to continue...
                ;;
        esac
    done
}

# 创建ce命令 (Create 'ce' command)
create_ce_command() {
    # This is a wrapper script to launch the main script in interactive mode
    cat > "$SCRIPT_PATH" << 'EOF'
#!/bin/bash
# This is a shortcut script, calls the main installation/management script

# Define colors for this wrapper script
RED='\033[0;31m'
NC='\033[0m' # No Color

# Source the config file to get INTERFACE, etc.
if [ -f "/etc/ce_traffic_limit.conf" ]; then
    # shellcheck source=/dev/null
    source "/etc/ce_traffic_limit.conf" 2>/dev/null || true
fi

# Determine the path to the main script (this script assumes it's copied)
MAIN_SCRIPT="/usr/local/bin/install_ce.sh"

# Check if the main script exists
if [ ! -f "$MAIN_SCRIPT" ]; then
    echo -e "${RED}错误: 主脚本 $MAIN_SCRIPT 未找到。请重新运行安装程序。${NC}" # Error: Main script $MAIN_SCRIPT not found. Please rerun the installer.
    exit 1
fi

# Check if it's an interactive call or a direct command call
if [ "$#" -eq 0 ]; then # No arguments provided
    "$MAIN_SCRIPT" --interactive
else
    "$MAIN_SCRIPT" "$@"
fi
EOF
    chmod +x "$SCRIPT_PATH" || log_message "ERROR" "设置ce命令可执行权限失败。"
    echo -e "${GREEN}ce 命令已创建: $SCRIPT_PATH${NC}" # 'ce' command created:
    log_message "INFO" "'ce' 命令已创建。"
}

# 主安装函数 (Main Installation Function)
main_install() {
    echo -e "${PURPLE}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║              CE 流量限速管理系统 - 安装程序                  ║${NC}" # CE Traffic Limiting Management System - Installer
    echo -e "${PURPLE}║                 精确流量统计 & 每月统计版本                  ║${NC}" # Precise Traffic Statistics & Monthly Statistics Version
    echo -e "${PURPLE}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    log_message "INFO" "开始执行主安装程序。"
    
    get_system_info
    detect_interface
    install_dependencies
    create_config # Create config and initialize daily/monthly counters
    create_monitor_service
    create_timer
    
    # Copy script to system directory for future 'ce' command calls and updates
    cp "$0" "$INSTALLER_PATH" || log_message "ERROR" "复制安装脚本到 $INSTALLER_PATH 失败。"
    chmod +x "$INSTALLER_PATH" || log_message "ERROR" "设置安装脚本可执行权限失败。"
    
    create_ce_command
    
    # Create log file and set permissions
    touch "$TRAFFIC_LOG" || log_message "ERROR" "创建流量日志文件失败。"
    chmod 644 "$TRAFFIC_LOG" || log_message "ERROR" "设置流量日志文件权限失败。"
    
    echo ""
    echo -e "${GREEN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                          安装完成！                          ║${NC}" # Installation Complete!
    echo -e "${GREEN}╠════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${GREEN}║  输入 'ce' 命令进入交互界面 (Enter 'ce' command to enter interactive mode)    ║${NC}"
    echo -e "${GREEN}║  每日流量限制: ${DAILY_LIMIT}GB/天 (Daily traffic limit: GB/day)             ║${NC}"
    echo -e "${GREEN}║  每月流量限制: ${MONTHLY_LIMIT}GB/月 (Monthly traffic limit: GB/month)           ║${NC}"
    echo -e "${GREEN}║  限速速度: ${SPEED_LIMIT}KB/s (Speed limit: KB/s)                             ║${NC}"
    echo -e "${GREEN}║  统计方式: 系统网卡精确统计 (支持vnStat备选) (Statistics method: System NIC precise stats (vnStat fallback supported))                 ║${NC}"
    echo -e "${GREEN}║  新增功能: 每月流量统计、详细统计、手动重置 (New features: Monthly stats, detailed stats, manual reset)                  ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}提示: 系统已开始精确统计今日及本月流量使用情况${NC}" # Hint: The system has started precisely counting today's and this month's traffic usage.
    log_message "INFO" "主安装程序完成。"
}

# ==============================================================================
# 主程序入口 (Main Program Entry Point)
# ==============================================================================

# Decide whether to install or enter interactive mode based on arguments or config file existence
case "${1:-}" in # "${1:-}" prevents error if no argument is provided
    --interactive)
        interactive_mode
        ;;
    --install)
        main_install
        ;;
    --uninstall) # Added direct uninstall option
        uninstall_all
        ;;
    *)
        if [ -f "$CONFIG_FILE" ]; then
            interactive_mode
        else
            main_install
        fi
        ;;
esac
